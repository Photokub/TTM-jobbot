import logging
import time
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, CallbackQueryHandler, ConversationHandler

# –í–∫–ª—é—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.DEBUG
)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
CHOOSING_MEDIA_TYPE = 1
WAITING_FOR_MEDIA = 2
WAITING_FOR_CAPTION = 3
PREVIEW_POST = 4
EDIT_POST = 5
WAITING_FOR_NEW_CAPTION = 6
WAITING_FOR_URL = 7

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Ç–∏–ø–æ–≤ –º–µ–¥–∏–∞
PHOTO = 'photo'
VIDEO = 'video'
DOCUMENT = 'doc'

# ID –∫–∞–Ω–∞–ª–∞ (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à)
CHANNEL_ID = "-1002309808938"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ ID –≤–∞—à–µ–≥–æ –∫–∞–Ω–∞–ª–∞

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤
posts_data = {}
reactions = {}

def get_post_buttons(post_id, include_edit=False):
    logger.debug(f"Creating buttons for post_id: {post_id}, include_edit: {include_edit}")
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç–∞
    post_data = None
    for user_data in posts_data.values():
        if user_data.get('post_id') == post_id:
            post_data = user_data
            break
    
    hh_url = "https://hh.ru/"  # URL –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    if post_data and 'hh_url' in post_data:
        hh_url = post_data['hh_url']
    
    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
    buttons = [[
        InlineKeyboardButton("üí¨ –ß–∞—Ç —Å —Ä–µ–∫—Ä—É—Ç–µ—Ä–æ–º", callback_data=f'chat_{post_id}'),
        InlineKeyboardButton("üîç –û—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è –Ω–∞ hh", url=hh_url)
    ]]
    
    if include_edit:
        edit_buttons = [
            InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f'edit_{post_id}'),
            InlineKeyboardButton("‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å", callback_data=f'publish_{post_id}')
        ]
        buttons.append(edit_buttons)
        logger.debug(f"Added edit buttons: {edit_buttons}")
    
    return InlineKeyboardMarkup(buttons)

async def start_post(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    logger.info(f"User {user_id} started new post creation")
    
    keyboard = [
        [
            InlineKeyboardButton("üì∑ –§–æ—Ç–æ", callback_data='type_photo'),
            InlineKeyboardButton("üé• –í–∏–¥–µ–æ", callback_data='type_video'),
            InlineKeyboardButton("üìÑ –î–æ–∫—É–º–µ–Ω—Ç", callback_data='type_doc')
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_id in posts_data:
        del posts_data[user_id]
    
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:",
        reply_markup=reply_markup
    )
    return CHOOSING_MEDIA_TYPE

async def media_type_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    user_id = update.effective_user.id
    media_type = query.data.split('_')[1]
    context.user_data['media_type'] = media_type
    logger.info(f"User {user_id} selected media type: {media_type}")
    
    media_messages = {
        'photo': "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ",
        'video': "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ",
        'doc': "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç"
    }
    
    await query.message.edit_text(media_messages[media_type])
    return WAITING_FOR_MEDIA

async def handle_media(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    media_type = context.user_data.get('media_type')
    logger.info(f"Handling media from user {user_id}, type: {media_type}")
    
    try:
        if media_type == PHOTO and update.message.photo:
            file_id = update.message.photo[-1].file_id
        elif media_type == VIDEO and update.message.video:
            file_id = update.message.video.file_id
        elif media_type == DOCUMENT and update.message.document:
            file_id = update.message.document.file_id
        else:
            await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ —Å /post")
            return ConversationHandler.END

        post_id = f"post_{user_id}_{int(time.time())}"
        posts_data[user_id] = {
            'media_type': media_type,
            'file_id': file_id,
            'post_id': post_id,
            'message_id': update.message.message_id
        }
        logger.debug(f"Stored post data: {posts_data[user_id]}")
        
        await update.message.reply_text(
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–æ–¥–ø–∏—Å—å –∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /skip –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –±–µ–∑ –ø–æ–¥–ø–∏—Å–∏"
        )
        return WAITING_FOR_CAPTION
        
    except Exception as e:
        logger.error(f"Error handling media: {str(e)}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return ConversationHandler.END

async def handle_caption(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    logger.info(f"Handling caption from user {user_id}")
    
    if user_id not in posts_data:
        logger.error(f"User {user_id} not found in posts_data")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ù–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞ —Å /post")
        return ConversationHandler.END
    
    posts_data[user_id]['caption'] = update.message.text
    logger.debug(f"Added caption to post: {posts_data[user_id]}")
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º URL –¥–ª—è –∫–Ω–æ–ø–∫–∏
    await update.message.reply_text(
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ URL –≤–∞–∫–∞–Ω—Å–∏–∏ –Ω–∞ hh.ru –¥–ª—è –∫–Ω–æ–ø–∫–∏ '–û—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è –Ω–∞ hh' –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /skip –¥–ª—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π —Å—Å—ã–ª–∫–∏"
    )
    return WAITING_FOR_URL

#–æ–±—Ä–∞–±–æ—Ç–∫–∞ url
async def handle_url(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    logger.info(f"Handling URL from user {user_id}")
    
    if user_id not in posts_data:
        logger.error(f"User {user_id} not found in posts_data")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ù–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞ —Å /post")
        return ConversationHandler.END
    
    url = update.message.text.strip()
    # –ë–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ URL
    if not (url.startswith('http://') or url.startswith('https://')):
        url = 'https://' + url
    
    posts_data[user_id]['hh_url'] = url
    logger.debug(f"Added URL to post: {posts_data[user_id]}")
    return await preview_post(update, context)

#–ø—Ä–æ–ø—É—Å–∫ url
async def skip_url(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    logger.info(f"User {user_id} skipped URL")
    posts_data[user_id]['hh_url'] = 'https://hh.ru/'
    return await preview_post(update, context)

async def skip_caption(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    logger.info(f"User {user_id} skipped caption")
    posts_data[user_id]['caption'] = ''
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º URL –¥–ª—è –∫–Ω–æ–ø–∫–∏
    await update.message.reply_text(
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ URL –≤–∞–∫–∞–Ω—Å–∏–∏ –Ω–∞ hh.ru –¥–ª—è –∫–Ω–æ–ø–∫–∏ '–û—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è –Ω–∞ hh' –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /skip –¥–ª—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π —Å—Å—ã–ª–∫–∏"
    )
    return WAITING_FOR_URL

async def preview_post(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    logger.info(f"Generating preview for user {user_id}")
    logger.info(f"Current posts_data: {posts_data}")
    
    if user_id not in posts_data:
        logger.error("User data not found")
        await update.effective_message.reply_text("–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return ConversationHandler.END
    
    try:
        post_data = posts_data[user_id]
        logger.debug(f"Preview post data: {post_data}")
        
        if post_data['media_type'] == PHOTO:
            sent_message = await context.bot.send_photo(
                chat_id=update.effective_chat.id,
                photo=post_data['file_id'],
                caption=post_data.get('caption', ''),
                reply_markup=get_post_buttons(post_data['post_id'], include_edit=True)
            )
        elif post_data['media_type'] == VIDEO:
            sent_message = await context.bot.send_video(
                chat_id=update.effective_chat.id,
                video=post_data['file_id'],
                caption=post_data.get('caption', ''),
                reply_markup=get_post_buttons(post_data['post_id'], include_edit=True)
            )
        else:
            sent_message = await context.bot.send_document(
                chat_id=update.effective_chat.id,
                document=post_data['file_id'],
                caption=post_data.get('caption', ''),
                reply_markup=get_post_buttons(post_data['post_id'], include_edit=True)
            )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞
        posts_data[user_id]['preview_message_id'] = sent_message.message_id
        
        await update.effective_message.reply_text(
            "üëÜ –¢–∞–∫ –±—É–¥–µ—Ç –≤—ã–≥–ª—è–¥–µ—Ç—å –≤–∞—à –ø–æ—Å—Ç. –í—ã –º–æ–∂–µ—Ç–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥–ø–∏—Å—å –∏–ª–∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –ø–æ—Å—Ç."
        )
        return PREVIEW_POST
        
    except Exception as e:
        logger.error(f"Error generating preview: {str(e)}")
        await update.effective_message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞: {str(e)}")
        return ConversationHandler.END

async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = update.effective_user.id
    
    logger.info(f"Button callback from user {user_id}: {query.data}")
    
    try:
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ —Ç–∏–ø –∫–Ω–æ–ø–∫–∏
        if query.data.startswith('type_'):
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –º–µ–¥–∏–∞
            return await media_type_callback(update, context)
            
        # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
        data_parts = query.data.split('_')
        if len(data_parts) < 2:
            logger.error(f"Invalid callback data format: {query.data}")
            await query.answer("–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö")
            return ConversationHandler.END
            
        action = data_parts[0]
        post_id = '_'.join(data_parts[1:])  # –°–æ–±–∏—Ä–∞–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è —á–∞—Å—Ç–∏ –æ–±—Ä–∞—Ç–Ω–æ –≤ post_id
        
        logger.debug(f"Action: {action}, Post ID: {post_id}")
        
        if action == 'edit':
            context.user_data['editing_post_id'] = post_id
            await query.message.reply_text("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—É—é –ø–æ–¥–ø–∏—Å—å –¥–ª—è –ø–æ—Å—Ç–∞:")
            await query.answer()
            return EDIT_POST
        
        elif action == 'publish':
            logger.info(f"Publishing attempt - User ID: {user_id}, Post ID: {post_id}")
            if user_id not in posts_data:
                logger.error(f"User {user_id} not found in posts_data during publish")
                await query.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ù–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞ —Å /post")
                return ConversationHandler.END
            
            post_data = posts_data[user_id]
            logger.info(f"Channel ID: {CHANNEL_ID}")
            logger.info(f"Attempting to publish with data: {post_data}")
            
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª–µ
                bot_member = await context.bot.get_chat_member(CHANNEL_ID, context.bot.id)
                logger.info(f"Bot status in channel: {bot_member.status}")
                
                if post_data['media_type'] == PHOTO:
                    await context.bot.send_photo(
                        chat_id=CHANNEL_ID,
                        photo=post_data['file_id'],
                        caption=post_data.get('caption', ''),
                        reply_markup=get_post_buttons(post_data['post_id'])
                    )
                elif post_data['media_type'] == VIDEO:
                    await context.bot.send_video(
                        chat_id=CHANNEL_ID,
                        video=post_data['file_id'],
                        caption=post_data.get('caption', ''),
                        reply_markup=get_post_buttons(post_data['post_id'])
                    )
                else:
                    await context.bot.send_document(
                        chat_id=CHANNEL_ID,
                        document=post_data['file_id'],
                        caption=post_data.get('caption', ''),
                        reply_markup=get_post_buttons(post_data['post_id'])
                    )
                
                await query.message.reply_text("‚úÖ –ü–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ –∫–∞–Ω–∞–ª–µ!")
                del posts_data[user_id]
                await query.answer()
                return ConversationHandler.END
                
            except Exception as e:
                logger.error(f"Error publishing post: {str(e)}")
                await query.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {str(e)}")
                await query.answer()
                return ConversationHandler.END
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π –∫–Ω–æ–ø–æ–∫
        if action == 'chat':
            await query.answer(text="–ü–µ—Ä–µ—Ö–æ–¥ –≤ —á–∞—Ç —Å —Ä–µ–∫—Ä—É—Ç–µ—Ä–æ–º")
            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è —á–∞—Ç–∞ —Å —Ä–µ–∫—Ä—É—Ç–µ—Ä–æ–º
            
        elif action == 'respond':
            await query.answer(text="–ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –æ—Ç–∫–ª–∏–∫–∞ hh.ru")
            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ hh.ru
        
    except Exception as e:
        logger.error(f"Error in button callback: {str(e)}")
        await query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
        return ConversationHandler.END

async def handle_new_caption(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    logger.info(f"Handling new caption from user {user_id}")
    
    if user_id not in posts_data:
        logger.error(f"User {user_id} not found in posts_data during caption edit")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ù–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞ —Å /post")
        return ConversationHandler.END
    
    posts_data[user_id]['caption'] = update.message.text
    logger.debug(f"Updated post caption: {posts_data[user_id]}")
    return await preview_post(update, context)

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    logger.info(f"User {user_id} cancelled the operation")
    
    if user_id in posts_data:
        del posts_data[user_id]
    
    await update.message.reply_text("–ü—É–±–ª–∏–∫–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
    return ConversationHandler.END

def main():
    try:
        # –°–æ–∑–¥–∞—ë–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏ –ø–µ—Ä–µ–¥–∞—ë–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
        application = Application.builder().token("7652918855:AAF8ywxV7GPrd-Ng4Cdsmhv25StkLvxGx2E").build()

        # –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
        conv_handler = ConversationHandler(
            entry_points=[CommandHandler('post', start_post)],
            states={
                CHOOSING_MEDIA_TYPE: [
                    CallbackQueryHandler(media_type_callback, pattern='^type_')
                ],
                WAITING_FOR_MEDIA: [
                    MessageHandler(filters.PHOTO, handle_media),
                    MessageHandler(filters.VIDEO, handle_media),
                    MessageHandler(filters.Document.ALL, handle_media)
                ],
                WAITING_FOR_CAPTION: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, handle_caption),
                    CommandHandler('skip', skip_caption)
                ],
                WAITING_FOR_URL: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, handle_url),
                    CommandHandler('skip', skip_url)
                ],
                PREVIEW_POST: [
                    CallbackQueryHandler(button_callback)
                ],
                EDIT_POST: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, handle_new_caption)
                ],
                WAITING_FOR_NEW_CAPTION: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, handle_new_caption)
                ]
            },
            fallbacks=[
                CommandHandler('cancel', cancel),
                CallbackQueryHandler(button_callback)
            ]
        )

        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        application.add_handler(conv_handler)

        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ –¥–ª—è –ø–æ—Å—Ç–æ–≤ –≤ –∫–∞–Ω–∞–ª–µ
        application.add_handler(CallbackQueryHandler(button_callback))

        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        logger.info("Bot started")
        application.run_polling(allowed_updates=Update.ALL_TYPES)

    except Exception as e:
        logger.error(f"Error in main function: {str(e)}")
        raise e

if __name__ == '__main__':
    main()